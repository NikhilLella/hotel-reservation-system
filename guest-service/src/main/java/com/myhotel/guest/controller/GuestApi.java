package com.myhotel.guest.controller;
/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */


import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.myhotel.guest.model.GuestDTO;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-12-24T20:10:10.791Z")

@Validated
@Api(value = "guest", description = "the guest API")
@RequestMapping(value = "/guests")
public interface GuestApi {

	@ApiOperation(value = "Add a new guest ", nickname = "addGuest", notes = "", tags = { "guest", })
	@ApiResponses(value = { @ApiResponse(code = 201, message = " Guest Created"),
			@ApiResponse(code = 405, message = "Invalid input"),
			@ApiResponse(code = 500, message = "Internal Server Error") })
	@RequestMapping(value = "/guest", produces = { "application/xml", "application/json" }, consumes = {
			"application/json", "application/xml" }, method = RequestMethod.POST)
	ResponseEntity<Void> addGuest(
			@ApiParam(value = "Guest object that needs to be added ", required = true) @Valid @RequestBody GuestDTO body);

	@ApiOperation(value = "Deletes a guest", nickname = "deleteGuest", notes = "", tags = { "guest", })
	@ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid ID supplied"),
			@ApiResponse(code = 404, message = "Pet not found") })
	@RequestMapping(value = "/guest/{guestId}", produces = { "application/xml",
			"application/json" }, method = RequestMethod.DELETE)
	ResponseEntity<Void> deleteGuest(
			@ApiParam(value = "Guest id to delete", required = true) @PathVariable("guestId") Integer guestId);

	@ApiOperation(value = "Find guest by ID", nickname = "findByGuestId", notes = "Returns a single guest", response = GuestDTO.class, tags = {
			"guest", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = GuestDTO.class),
			@ApiResponse(code = 400, message = "Invalid ID supplied"),
			@ApiResponse(code = 404, message = "Guest not found") })
	@RequestMapping(value = "/guest/{guestId}", produces = { "application/xml",
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<GuestDTO> findByGuestId(
			@ApiParam(value = "ID of guest to return", required = true) @PathVariable("guestId") Integer guestId);

	@ApiOperation(value = "Update an existing guest", nickname = "updateGuest", notes = "", tags = { "guest", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "success"),
			@ApiResponse(code = 400, message = "Invalid ID supplied"),
			@ApiResponse(code = 404, message = "Guest  not found"),
			@ApiResponse(code = 405, message = "Validation exception") })
	@RequestMapping(value = "/guest", produces = { "application/xml", "application/json" }, consumes = {
			"application/json", "application/xml" }, method = RequestMethod.PUT)
	ResponseEntity<Void> updateGuest(
			@ApiParam(value = "Guest object that needs to be added", required = true) @Valid @RequestBody GuestDTO body);

	@ApiOperation(value = "Updates a guest with form data", nickname = "updatePetbyId", notes = "", tags = { "guest", })
	@ApiResponses(value = { @ApiResponse(code = 405, message = "Invalid input") })
	@RequestMapping(value = "/guest/{guestId}", produces = { "application/xml", "application/json" }, consumes = {
			"application/x-www-form-urlencoded" }, method = RequestMethod.PUT)
	ResponseEntity<Void> updateGuestbyId(
			@ApiParam(value = "ID of guest that needs to be updated", required = true) @PathVariable("guestId") Integer guestId,
			@ApiParam(value = "Updated name of the guest") @RequestParam(value = "name", required = false) String name,
			@ApiParam(value = "Updated proof of the guest") @RequestParam(value = "proof", required = false) String proof,
			@ApiParam(value = "Updated stay history of the guest") @RequestParam(value = "stayHistory", required = false) String stayHistory,
			@ApiParam(value = "Updated address of the guest") @RequestParam(value = "address", required = false) String address,
			@ApiParam(value = "Updated mobile number of the guest") @RequestParam(value = "mobileNumber", required = false) String mobileNumber);

}
